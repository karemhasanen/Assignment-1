# -*- coding: utf-8 -*-
"""Assignment_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hs_nkVYZxTRdS5Kua_leecuv65PifpwV
"""

import random
import re

import random

def last_index_of(lst, item):
    try:
        reversed_index = len(lst) - lst[::-1].index(item) - 1
        return reversed_index
    except ValueError:
        return -1

def eliminate_implication(expression):
    expression = expression.split(" ")
    while '->' in expression:
        index = expression.index('->')
        left_index = index - 1
        if expression[left_index] == ")":
            left_index = last_index_of(expression[0:index], "(")
        expression[left_index] = "~" + expression[left_index]
        expression[index] = '|'
    return ' '.join(expression)

def apply_demorgan_law(expression):
    expression = expression.split(" ")
    while '~(' in expression:
        index = expression.index('~(')
        first_operand = index + 1
        operator = index + 2
        second_operand = index + 3
        expression[first_operand] = "~" + expression[first_operand]
        expression[second_operand] = "~" + expression[second_operand]
        if expression[operator] == '|':
            expression[operator] = '&'
        elif expression[operator] == '&':
            expression[operator] = '|'
        expression[index] = "("
    return ' '.join(expression)

def remove_double_negations(expression):
    i = 0
    while i < len(expression) - 1:
        if expression[i] == '~' and expression[i + 1] == '~':
            expression = expression[:i] + expression[i + 2:]
        else:
            i += 1
    return expression

def standardize_vars(expression):
    variables = []
    for i in range(len(expression)):
        if expression[i] == '∀' or expression[i] == '∃':
            if expression[i + 1] not in variables:
                variables.append(expression[i + 1])
            else:
                random_letter = chr(random.randint(ord('a'), ord('z')))
                while random_letter in variables:
                    random_letter = chr(random.randint(ord('a'), ord('z')))
                expression = expression[:i] + expression[i:].replace(expression[i + 1], random_letter)
                variables.append(random_letter)
    return expression

def to_prenex(expression):
    expression = expression.split(" ")
    for i in range(len(expression)):
        if expression[i][0] == '∃':
            expression.insert(0, expression[i])
            expression.pop(i + 1)
    for i in range(len(expression)):
        if expression[i][0] == '∀':
            expression.insert(0, expression[i])
            expression.pop(i + 1)
    return ' '.join(expression)

expression = "∃x ∀y ∀z ( ( P(y) -> Q(z) ) -> ( P(x) -> Q(x) ) )"

print("Original Expression:", expression)

expression = eliminate_implication(expression)
print("After Eliminating Implications:", expression)

expression = apply_demorgan_law(expression)
print("After Applying Demorgan's Law:", expression)

expression = remove_double_negations(expression)
print("After Removing Double Negations:", expression)

expression = standardize_vars(expression)
print("After Standardizing Variables:", expression)

expression = to_prenex(expression)
print("After Converting to Prenex Form:", expression)



